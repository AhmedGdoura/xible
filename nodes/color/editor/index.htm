<style>
	/* hue & saturation wheel */

	.container {
		width: 100%;
		padding-top: 100%;
		position: relative;
	}

	.wheel {
		position: absolute;
		top: 0;
		left: 0;
		bottom: 0;
		right: 0;
		box-sizing: border-box;
		border-radius: 50%;
		border: 2px solid #3E3E3E;
		width: 100%;
		height: 100%;
		cursor: pointer;
	}

	.selector {
		cursor: pointer;
		height: 5px;
		width: 5px;
		border: 1px solid #000;
		border-radius: 50%;
		background-color: transparent;
		position: absolute;
		top: 50%;
		left: 50%;
	}
	/* brightness/value slider */

	input[name="value"] {
		position: relative;
		background-image: linear-gradient(90deg, #000 0%, #fff 100%);
	}

	input[name="value"]::-webkit-slider-runnable-track {
		background-color: transparent !important;
	}

	input[name="value"]::after {
		content: attr(value) "%";
		display: block;
		background-color: #fff;
		color: #000;
		font-weight: bold;
		height: auto;
		width: auto;
		position: absolute;
		right: 0;
		top: 24px;
		box-shadow: 0 0 5px #000;
		line-height: 12px;
		font-size: 12px;
		padding: 4px;
		border-radius: 4px;
	}
</style>
<div class="container">
	<canvas class="wheel"></canvas>
	<div class="selector"></div>
</div>
<input data-outputvalue="v" name="value" type="range" min="0" max="100" step="1" value="0" oninput="this.setAttribute('value', this.value);" />
<script>
	let brightness = this.editorContentEl.querySelector('input[name="value"]');
	let canvas = this.editorContentEl.getElementsByTagName('canvas')[0];
	let ctx = canvas.getContext('2d');

	let selector = this.editorContentEl.querySelector('.selector');

	function rgbToHsv(r, g, b) {

		if (arguments.length === 1) {

			g = r.g;
			b = r.b;
			r = r.r;

		}

		let max = Math.max(r, g, b);
		let min = Math.min(r, g, b);
		let d = max - min;
		let h;
		let s = (max === 0 ? 0 : d / max);
		let v = max / 255;

		switch (max) {
			case min:
				h = 0;
				break;
			case r:
				h = (g - b) + d * (g < b ? 6 : 0);
				h /= 6 * d;
				break;
			case g:
				h = (b - r) + d * 2;
				h /= 6 * d;
				break;
			case b:
				h = (r - g) + d * 4;
				h /= 6 * d;
				break;
		}

		return {
			h: h,
			s: s,
			v: v
		};

	}

	//set the position of the selector in the wheel, based on a mouse input event
	let setColorPositionOnEvent = (event) => {

		let canvasBounding = canvas.getBoundingClientRect();
		let y = (event.pageY - canvasBounding.top) / this.editor.zoom;
		let x = (event.pageX - canvasBounding.left) / this.editor.zoom;

		setColorPosition(x, y);

	}

	//set the position of the selector in the wheel, based on x & y position
	let setColorPosition = (x, y) => {

		//get the mouse position
		selector.style.top = (y - 4) + 'px';
		selector.style.left = (x - 2) + 'px';

		let imageData = ctx.getImageData(x, y, 1, 1).data;
		let hsv = rgbToHsv(imageData[0], imageData[1], imageData[2]);
		this.setData({
			h: hsv.h,
			s: hsv.s,
			x: x,
			y: y
		});

	}

	//set the correct canvas height and width
	//if we don't do this, the getImageData positions are incorrect
	canvas.setAttribute('width', canvas.offsetWidth);
	canvas.setAttribute('height', canvas.offsetHeight);


	//load the color wheel
	let img = new Image();
	img.crossOrigin = 'anonymous';
	img.onload = () => {

		//correct the height and width of the canvas
		//canvas.height = canvas.offsetHeight;
		//canvas.width = canvas.offsetWidth;
		ctx.drawImage(img, 0, 0);

		//set the initial position
		if (typeof this.data.y === 'number' && typeof this.data.x === 'number') {
			setColorPosition(this.data.x, this.data.y);
		}

	}
	img.src = 'https://10.0.0.10:9600/api/nodes/color/editor/wheel.svg';

	//change
	selector.onmousedown = canvas.onmousedown = function(event) {

		//stop this from dragging the node
		event.stopPropagation();

		//hook mousemove
		document.body.addEventListener('mousemove', setColorPositionOnEvent);

		//cancel mousemove
		let mouseUpFn;
		document.body.addEventListener('mouseup', mouseUpFn = (event) => {

			document.body.removeEventListener('mousemove', setColorPositionOnEvent);
			document.body.removeEventListener('mouseup', mouseUpFn);
			mouseUpFn = null;

		});

		setColorPositionOnEvent(event);

	};
</script>
